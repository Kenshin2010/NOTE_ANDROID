NOTE - KOTLIN

https://medium.com/androiddevelopers/31daysofkotlin-week-2-recap-9eedcd18ef8



https://medium.com/codex/do-you-follow-these-kotlin-best-practices-d7e68ed58150


// note về mvvm, khai báo viewModel cho đúng
https://viblo.asia/p/phat-trien-android-hien-dai-voi-kotlin-phan-3-yMnKMyYDK7P


//Tip kotlin 
https://viblo.asia/p/kotlin-tips-su-dung-singleton-utility-functions-group-object-initialization-va-nhieu-hon-nua-3Q75wyvBZWb
https://viblo.asia/p/idiomatic-kotlin-phan-1-Ljy5Veezlra
https://viblo.asia/p/idiomatic-kotlin-phan-2-Eb85oBeWl2G



- HẠN CHẾ DÙNG IF,sử dụng thông minh hơn cho biến lazy, viewmodel nên theo vòng đời , tránh case xoay màn hình

Làm quen với Higher Order Functions trong Kotlin
https://viblo.asia/p/lam-quen-voi-higher-order-functions-trong-kotlin-bWrZnpRm5xw


//Paging Library Trong Android
https://viblo.asia/p/paging-library-trong-android-bJzKmggrl9N

//tracking app
https://viblo.asia/p/using-repro-de-thong-ke-trong-ung-dung-mobile-part-1-ORNZqN63l0n


//tools dịch đa ngôn ngữ
https://plugins.jetbrains.com/plugin/11174-androidlocalize

//collection nâng cao
https://blog.appcircle.io/article/transforming-kotlin-collections-functions-with-examples


// Chú ý cách hủy coroutines trong link dưới đây
https://proandroiddev.com/part-2-coroutine-cancellation-and-structured-concurrency-2dbc6583c07d

// sử dụng operator method, gọi đối tượng như 1 hàm
https://proandroiddev.com/increasing-readability-using-operator-conventions-in-kotlin-d518541f4c0a


// guide to kotlin full
https://github.com/dinhpv38/guide-to-kotlin

// ko khai báo class interface như trước ở trong adapter nữa , dùng typealias ItemClickListener = (Item) -> Unit
để làm biến callback

// dùng takeif thay cho if


// dùng inline cho các trường hợp như dưới đây cho gọn code
inline fun EditText.onTextChanged(crossinline eventHandler: (String) -> Unit) {
    this.addTextChangedListener(object: TextWatcher {
        override fun afterTextChanged(s: Editable) {
             eventHandler(s.toString())
        }

        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {                
        }

        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
        }
    })
}


// nên dùng infix trong trường hợp nào
- là một hàm thành viên (hoặc một hàm mở rộng ) .
- chỉ có một tham số duy nhất.
- được đánh dấu bằng từ khóa infix.

VD INFIX:
infix fun createPyramid(rows: Int) {
        var k = 0
        for (i in 1..rows) {
            k = 0
            for (space in 1..rows-i) {
                print("  ")
            }
            while (k != 2*i-1) {
                print("* ")
                ++k
            }
            println()
        }
    }
    
fun main(args: Array<String>) {
    val p = Structure()
    p createPyramid 4       // p.createPyramid(4)
}


// Cách viết generic trong kotlin in. out. where
https://adventures92.medium.com/kotlin-generics-explaind-mastering-in-out-and-where-804ee1642627

// cách triển khai retrofit - courtines
https://medium.com/@abdulqadirtr/replacing-asynchronous-callbacks-with-coroutines-1d3ef0d11f9
